<launch>
  <!-- This launch file is for a right UR10 arm and shadow hand -->
  <!-- set to false if you want to use real robots, true if you need the gazebo simulation -->
  <arg name="sim" default="true" />
  <!-- Set to true for debugging -->
  <arg name="debug" default="false" />
  <!-- Set to true to spawn trajectory controllers for the hands(the trajectory controller overwrites continuously the joint position command, preventing direct control via topics-->
  <arg name="hand_trajectory" default="true" />
  <!-- Set to true to spawn trajectory controllers for the arms (the trajectory controller overwrites continuously the joint position command, preventing direct control via topics-->
  <arg name="arm_trajectory" default="true" />
  <!-- Set to true to spawn the position controllers for the hands-->
  <arg name="hand_ctrl" default="true" />
  <!-- Set to true to spawn the position controllers for the arm-->
  <arg name="arm_ctrl" default="true" />
   
  <!-- SIMULATED ROBOTS -->
  <group if="$(arg sim)">
    <arg name="world_name"
    value="$(find sr_description)/other/worlds/shadowhand.world" />
    <arg name="paused" value="false" />
    <!-- arm + hand -->
    <param name="robot_description"
    command="$(find xacro)/xacro.py '$(find sr_multi_description)/urdf/shadow_ur10_joint_limited.urdf.xacro'" />
    <node name="arm_hand_joint_state_merger"
          pkg="joint_state_publisher" type="joint_state_publisher">
      <param name="use_gui" value="false"/>
      <rosparam param="source_list" >["/arm/joint_states","/hand/joint_states"]</rosparam>  
    </node>  
    <arg name="pos" value="0.012 0.0 0.0 1.5708 3.1416 1.5708" />
    <node pkg="tf" type="static_transform_publisher" name="base_link" args="$(arg pos) /ee_link /forearm 100"/>
    
    <!-- hand alone in a namespace -->
    <group ns="hand">
      <param name="robot_description"
      command="$(find xacro)/xacro.py '$(find sr_description)/robots/shadowhand_motor.urdf.xacro'" />
      <include file="$(find sr_hand)/launch/gazebo/loaders/hand_controllers.launch">
        <arg name="hand_controller_gazebo"
        value="$(find sr_multi_description)/config/hand_controller_gazebo.yaml" />
      </include>
      
      <rosparam command="load"
      file="$(find sr_multi_description)/config/hand_trajectory_controller.yaml" />
      <group if="$(arg hand_trajectory)">
        <node name="hand_trajectory_controller_spawner"
        pkg="controller_manager" type="spawner" output="screen"
        args="--shutdown-timeout=1.0 hand_trajectory_controller" />
      </group>
      
      <!-- joint_state_controller -->
      <include file="$(find ros_ethercat_model)/launch/joint_state_publisher.launch" />
      
      
      <node pkg="robot_state_publisher" type="state_publisher"
      name="robot_state_publisher_target_hand"/>
   </group>
    <!-- arm urdf alone and its controllers in a namespace -->
    <group ns="arm">
      <param name="robot_description" 
      command="$(find xacro)/xacro.py '$(find ur_description)/urdf/ur10_robot.urdf.xacro'" />
      <include file="$(find ur_gazebo)/launch/controller_utils.launch" />
      <rosparam file="$(find sr_multi_description)/config/arm_trajectory_controller.yaml"
      command="load" />
      <group if="$(arg arm_trajectory)">
        <node name="arm_trajectory_controller_spawner"
        pkg="controller_manager" type="spawner" output="screen"
        args="--shutdown-timeout=1.0 arm_trajectory_controller" />
      </group>
    </group>
    
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
      <arg name="world_name" default="$(arg world_name)" />
      <arg name="gui" default="true" />
      <arg name="paused" value="$(arg paused)" />
      <arg name="debug" value="$(arg debug)" />
    </include>
    <node name="spawn_model" pkg="gazebo_ros" type="spawn_model"
    args="-urdf -param robot_description -model ur10shadow -z 0.05 -J elbow_joint 0.8 -J shoulder_lift_joint -0.6 -J shoulder_pan_joint 0.0 -J wrist_1_joint 0.0 -J wrist_2_joint 0.0 -J wrist_3_joint 0.0"
    respawn="false" output="screen" />
    
    
  </group>
 
</launch>
